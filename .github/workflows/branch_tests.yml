name: GLuaTest Branch Runner

on:
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Run all branches regardless of the last build version'
        required: false
        type: boolean
        default: false

  # Depending on the longest run, this should be about ~10m after GLuaTest's automatic check:
  # https://github.com/CFC-Servers/GLuaTest/blob/main/.github/workflows/check_for_updates.yml#L12
  schedule:
    - cron: "28 */12 * * *"

env:
  BRANCH_MAP: >
    {
      "dev": "last_dev_build.txt",
      "prerelease": "last_prerelease_build.txt",
      "live": "last_public_build.txt",
      "x86-64": "last_64bit.txt"
    }
  ALL_BRANCHES: '["dev", "prerelease", "live", "x86-64"]'

permissions:
  actions: read
  contents: read

jobs:
  check_versions:
    name: Check for Updated Versions
    runs-on: ubuntu-latest
    outputs:
      branches_to_run: ${{ steps.compare_versions.outputs.branches_to_run }}
      should_run: ${{ steps.compare_versions.outputs.should_run }}

    steps:
      - name: Checkout Current Repo Version Branch
        uses: actions/checkout@v4
        with:
          ref: "build/last-build-versions"
          path: "gmod_tests"

      - name: Checkout GLuaTest Version Branch
        uses: actions/checkout@v4
        with:
          repository: "CFC-Servers/GLuaTest"
          ref: "build/last-build-versions"
          path: "GLuaTest"

      - name: Install requirements
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Compare Version Files and Determine Branches
        id: compare_versions
        shell: bash
        run: |
          echo "Force run requested?: ${{ github.event.inputs.force_run }}"

          if [[ "${{ github.event.inputs.force_run }}" == "true" ]]; then
            echo "Force run enabled, running all branches."
            branches_json='${{ env.ALL_BRANCHES }}'
          else
            echo "Comparing versions..."
            branches=()
            branch_map='${{ env.BRANCH_MAP }}'

            for branch in $(echo "$branch_map" | jq -r 'keys[]'); do
              version_file=$(echo "$branch_map" | jq -r --arg b "$branch" '.[$b]')
              current_version_path="$version_file"
              gluatest_version_path="GLuaTest/$version_file"

              echo "Comparing $branch ($version_file)..."

              if [[ ! -f "$current_version_path" ]]; then
                echo "Warning: Version file $current_version_path not found in current repo."
                current_version=""
              else
                current_version=$(cat "$current_version_path")
              fi

              if [[ ! -f "$gluatest_version_path" ]]; then
                echo "Warning: Version file $gluatest_version_path not found in GLuaTest repo."
                gluatest_version=""
              else
                gluatest_version=$(cat "$gluatest_version_path")
              fi

              if [[ "$current_version" != "$gluatest_version" ]]; then
                echo "  -> Versions differ ('$current_version' vs '$gluatest_version') or file missing. Adding $branch to run list."
                branches+=("$branch")
              else
                echo "  -> Versions match ('$current_version'). Skipping $branch."
              fi
            done

            if [[ ${#branches[@]} -gt 0 ]]; then
              branches_json=$(printf '%s\n' "${branches[@]}" | jq -R . | jq -s .)
            else
              branches_json="[]"
            fi
          fi

          echo "Branches to run: $branches_json"
          echo "branches_to_run=$branches_json" >> $GITHUB_OUTPUT

          if [[ "$branches_json" == "[]" ]]; then
              echo "should_run=false" >> $GITHUB_OUTPUT
          else
              echo "should_run=true" >> $GITHUB_OUTPUT
          fi

  run_tests:
    needs: check_versions
    if: needs.check_versions.outputs.should_run == 'true'
    strategy:
      matrix:
        branch: ${{ fromJson(needs.check_versions.outputs.branches_to_run) }}
      fail-fast: false

    name: Run Tests on ${{ matrix.branch }}
    uses: CFC-Servers/GLuaTest/.github/workflows/run_tests.yml@main
    with:
      collection: 3460542547
      map: gm_glua_tests
      branch: ${{ matrix.branch }}
      extra-startup-args: "-maxplayers 64"

  summarize_failures:
      name: Summarize Failures
      needs: run_tests
      if: always() && (needs.run_tests.result == 'failure')
      runs-on: ubuntu-latest
      outputs:
        failure_summary: ${{ steps.get_failures.outputs.failure_summary }}
        failed_branches_count: ${{ steps.get_failures.outputs.failed_branches_count }}
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Get Failed Test Details using Python
          id: get_failures
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          shell: bash
          run: |
            # Get ID and Name of failed matrix jobs
            failed_jobs_json=$(gh api /repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs -q '.jobs[] | select(.name | startswith("Run Tests on ")) | select(.conclusion=="failure") | {id: .id, name: .name}' | jq -s .)

            summary_output=""
            count=0
            failed_branches_list=""

            echo "Processing failed jobs:"
            echo "$failed_jobs_json" | jq -c '.[]' | while IFS= read -r job_json; do
              job_id=$(echo "$job_json" | jq -r '.id')
              job_name=$(echo "$job_json" | jq -r '.name')
              branch_name=$(echo "$job_name" | sed 's/Run Tests on //g')

              echo "Fetching logs for job $job_id (Branch: $branch_name)..."

              # Use || true for resilience if gh or python fails
              filtered_failures=$(gh job view "$job_id" --log | python .github/tools/parse_test_failures.py || true)

              if [[ -n "$filtered_failures" || $(echo "$job_json" | jq -r '.conclusion') != "success" ]]; then
                 summary_output+="\n**Branch: $branch_name**\n"
                 if [[ -n "$filtered_failures" ]]; then
                    summary_output+=" \`\`\`\n${filtered_failures}\n\`\`\`"
                 else
                    summary_output+=" Job failed, but no specific test failure summary found matching pattern."
                 fi

                 if [[ $count -gt 0 ]]; then failed_branches_list+=","; fi

                 failed_branches_list+="$branch_name"
                 ((count++))
              fi
            done

            echo "Final Summary Details:"
            echo -e "$summary_output"

            summary_output="${summary_output//'%'/'%25'}"
            summary_output="${summary_output//$'\n'/'%0A'}"
            summary_output="${summary_output//$'\r'/'%0D'}"

            echo "failure_summary=$summary_output" >> $GITHUB_OUTPUT
            echo "failed_branches_count=$count" >> $GITHUB_OUTPUT

  report_failure:
    name: Report Failure to Discord
    needs: [run_tests, summarize_failures]
    if: failure() && needs.run_tests.result == 'failure' && needs.summarize_failures.outputs.failed_branches_count > 0
    runs-on: ubuntu-latest

    steps:
      - name: Send Discord Notification
        uses: tsickert/discord-webhook@v7.0.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          wait: true
          embed-title: "‚ùå GLuaTest Branch Runner Failed"
          embed-color: 15548997 # Red
          embed-url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          embed-description: |
            One or more tests failed or were cancelled. See failure summary below.
            ${{ needs.summarize_failures.outputs.failure_summary }}
